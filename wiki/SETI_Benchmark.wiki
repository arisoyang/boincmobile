#summary How to use SETI@Home as an FFT benchmark.

= How to use SETI@Home as an FFT benchmark =

The purpose of SETI@home is to analyze radio signals, searching for signs of extra terrestrial intelligence, and is one of many activities undertaken as part of SETI.

The software searches for five types of signals that distinguish them from noise and primarily uses FFT:

 * Spikes in power spectra
 * Gaussian rises and falls in transmission power, possibly representing    the telescope beam's main lobe passing over a radio source
 * Triplets â€” three power spikes in a row
 * Pulsing signals that possibly represent a narrowband digital-style transmission
 * Autocorrelation detects signal waveforms.

A test "work unit" is included in the SVN repository and can be used as a "static workload" to compare execution results across other platforms. The "work unit" will execute faster on some architectures versus others, but it will accomplish the same amount of work. For example the Intel Core i3 processor executes the work unit in around 90 minutes whereas 448 minutes on an Atom processor. 

The main benefit of using static workloads is that a power / performance profile can be established. For example: Time x Power = Joules / per SETI work unit.

==Compiling BOINC and SETI on a Ubuntu platform==

Installing and building BOINC is a requirement to run SETI.

=== Building on a Ubuntu Cortex-A8 ===

{{{
#!/bin/bash

sudo apt-get install autoconf m4 openssl libcurl4-openssl-dev libtool subversion libfftw3-dev

svn co http://boinc.berkeley.edu/svn/trunk/boinc 
cd boinc/
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=cortex-a8 -mfpu=neon" CFLAGS="-O3 -mtune=cortex-a8 -mfpu=neon"
make

svn checkout https://setisvn.ssl.berkeley.edu/svn/seti_boinc
cd ../seti_boinc
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=cortex-a8 -mfpu=neon" CFLAGS="-O3 -mtune=cortex-a8 -mfpu=neon"
make
}}}

=== Building on a Ubuntu Cortex-A9 ===

{{{
#!/bin/bash

sudo apt-get install autoconf m4 openssl libcurl4-openssl-dev libtool subversion libfftw3-dev

svn co http://boinc.berkeley.edu/svn/trunk/boinc 
cd boinc/
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=cortex-a9 -mfpu=neon" CFLAGS="-O3 -mtune=cortex-a9 -mfpu=neon"
make

svn checkout https://setisvn.ssl.berkeley.edu/svn/seti_boinc
cd ../seti_boinc
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=cortex-a9 -mfpu=neon" CFLAGS="-O3 -mtune=cortex-a9 -mfpu=neon"
make
}}}

=== Building on a Ubuntu Atom ===

{{{
#!/bin/bash

sudo apt-get install autoconf m4 openssl libcurl4-openssl-dev libtool subversion libfftw3-dev

svn co http://boinc.berkeley.edu/svn/trunk/boinc 
cd boinc/
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=atom" CFLAGS="-O3 -mtune=atom"
make

svn checkout https://setisvn.ssl.berkeley.edu/svn/seti_boinc
cd ../seti_boinc
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=atom" CFLAGS="-O3 -mtune=atom"
make
}}}

=== Building on a Ubuntu Core i3 ===

{{{
#!/bin/bash

sudo apt-get install autoconf m4 openssl libcurl4-openssl-dev libtool subversion libfftw3-dev

svn co http://boinc.berkeley.edu/svn/trunk/boinc 
cd boinc/
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=core2" CFLAGS="-O3 -mtune=core2"
make

svn checkout https://setisvn.ssl.berkeley.edu/svn/seti_boinc
cd ../seti_boinc
./_autosetup
./configure --disable-server CXXFLAGS="-O3 -mtune=core2" CFLAGS="-O3 -mtune=core2"
make
}}}


=== Using Optimized Version of FFTW (Optional) ===
Note: I didn't see much performance difference with this versus the debian package and thus ended up using the .deb version
Project Link: http://code.google.com/p/fftw-neon/
{{{
wget http://www.fftw.org/fftw-3.2.2.tar.gz 
tar xvzf fftw-3.2.2.tar.gz
cd ../fftw-3.2.2/
./configure --prefix=/usr --enable-single --enable-shared --with-pic CFLAGS="-O3 -pipe -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp"
make
sudo make install

cd ../fftw-3.2.2/
wget http://code.google.com/p/fftw-neon/downloads/detail?name=fftw-3.2.2-neon-1.diff
patch -p1 < fftw-3.2.2-neon-1.diff
./configure --prefix=/usr --enable-single --enable-shared --with-pic CFLAGS="-O3 -pipe -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp"
make
sudo make install
}}}

== Running SETI on all platforms ==

Rules

 # SETI (setiboinc) looks for the BOINC middleware in ../boinc
  * Your source tree should look like
   *../boinc
   *../seti_boinc



To capture exact time a script should be used
{{{
#!/bin/bash
# Using SETI as an FFT benchmark
date
./seti_boinc --standalone &
date

}}}